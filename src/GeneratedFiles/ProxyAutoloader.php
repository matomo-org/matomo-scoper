<?php
/**
 * Matomo - free/libre analytics platform
 *
 * @link https://matomo.org
 * @license http://www.gnu.org/licenses/gpl-3.0.html GPL v3 or later
 */

namespace Matomo\Scoper\GeneratedFiles;

use Matomo\Scoper\GeneratedFile;
use Symfony\Component\Console\Output\OutputInterface;

class ProxyAutoloader extends GeneratedFile
{
    const PROXY_FILE_MARKER = '/* this file was generated by the matomo-scoper tool */';

    private string $vendorPath;

    private OutputInterface $output;

    public function __construct(string $vendorPath, OutputInterface $output)
    {
        parent::__construct($vendorPath . '/autoload.php');

        $this->vendorPath = $vendorPath;
        $this->output = $output;
    }

    public function getContent(): ?string
    {
        $proxyFileMarker = self::PROXY_FILE_MARKER;

        $proxyAutoloadContent = <<<EOF
<?php
$proxyFileMarker

\$originalLoader = require_once __DIR__ . DIRECTORY_SEPARATOR . 'autoload_original.php';

if (is_file(__DIR__ . '/prefixed/vendor/autoload.php')) {
    require_once __DIR__ . '/prefixed/vendor/autoload.php';
}

return \$originalLoader;
EOF;

        return $proxyAutoloadContent;
    }

    public function write(): void
    {
        $originalAutoloadPath = $this->vendorPath . '/autoload_original.php';

        if (!is_file($this->outputPath)) {
            $this->output->writeln("<error>Cannot find original composer autoloader!</error>");
            return;
        }

        if ($this->isFileAutoloadProxy($this->outputPath)) {
            $this->output->writeln("<comment>Proxy autoload.php already exists, skipping generation.</comment>");
            return;
        }

        // backup existing file
        copy($this->outputPath, $originalAutoloadPath);

        parent::write();
    }

    private function isFileAutoloadProxy(string $autoloadPath): bool
    {
        $contents = file_get_contents($autoloadPath);
        return strpos($contents, self::PROXY_FILE_MARKER) !== false;
    }
}
